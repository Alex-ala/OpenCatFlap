#include <OCFFlapControl.h>

void OCFFlapControl::init(){
    StaticJsonDocument<OCF_MAX_JSON_SIZE> doc;
    bool loaded = OCFFilesystem::readJsonFile(FLAP_CONFIG_FILE, doc);
    if (!loaded){
        log_d("Failed to load flap config, using defaults");
        config.allow_in = false;
        config.allow_out = false;
    }
    if (doc.containsKey("allowed_in")) config.allow_in = doc["allowed_in"].as<bool>();
    if (doc.containsKey("allowed_out")) config.allow_in = doc["allowed_out"].as<bool>();
    doc.clear();
    log_d("Flap config loaded. In: %d, Out: %d", config.allow_in, config.allow_out);
    stateMachineOutside = new OCFStateMachine(OCFDirection::OUT);
    stateMachineInside = new OCFStateMachine(OCFDirection::IN);

}

void  OCFFlapControl::deinit(){

}

void  OCFFlapControl::loop(void* params){
    while(true){
        stateMachineInside->update();
        stateMachineOutside->update();
        delay(10);
        // Idea: collect events generated by both updates, aggregate them and run handlers (save, mqtt)
    }
}
